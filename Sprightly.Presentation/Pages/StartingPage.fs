namespace Sprightly.Presentation.Pages

open Elmish
open Elmish.WPF

open Sprightly
open Sprightly.Presentation

/// <summary>
/// The <see cref="StartingPage"/> module defines the MVU of the opening page 
/// of this Sprightly application
/// </summary>
module public StartingPage =
    /// <summary>
    /// The model of this starting page consisting of the recent projects.
    /// </summary>
    type public Model = 
        { RecentProjects : Domain.RecentProject.T list }

    /// <summary>
    /// Recent project messages.
    /// </summary>
    type public RecentProjectMsg =
        | RequestOpenRecentProject

    /// <summary>
    /// Union defining the messages able to be generated by the View and handled by the
    /// update function
    /// </summary>
    type public Msg = 
        | RecentProjectMsg of Domain.RecentProject.Id * RecentProjectMsg
        | RequestMoveToNewProjectPage
        | RequestOpenProjectFilePicker
        | RequestOpenProject of Common.Path.T
        | UpdateRecentProjects of Domain.RecentProject.T list
        | NoOp

    /// <summary>
    /// Union defining the command messages being generated by the update function.
    /// </summary>
    type public CmdMsg =
        | OpenProjectFilePicker
        | LoadProject of Common.Path.T
        | MoveToNewProjectPage
        | LoadRecentProjects

    /// <summary>
    /// Create a new model and corresponding command messages.
    /// </summary>
    /// <returns>
    /// The initial <see cref="Model"/> and a list of <see cref="CmdMsg"/> 
    /// which should be executed at the start.
    /// <?summary>
    let public init () : Model * CmdMsg list  = { RecentProjects = [] }, []

    let private openProjectFilePickerCmd () =
        let config = Components.Dialogs.FileDialogConfiguration(addExtension = true,
                                                                checkIfFileExists = true,
                                                                dereferenceLinks = true,
                                                                filter = "Sprightly solution files (*.sprightly)|*.sprightly|All files (*.*)|*.*",
                                                                filterIndex = 1, 
                                                                multiSelect = false,
                                                                restoreDirectory = false, 
                                                                title = "Load a sprightly solution")
        Components.Dialogs.FileDialog.showDialogCmd
            RequestOpenProject
            (fun _ -> NoOp)
            (fun _ -> NoOp)
            Components.Dialogs.FileDialog.DialogType.Open
            config

    /// <summary>
    /// Convert the specified <paramref name="cmdMsg"/> to a parent message command.
    /// </summary>
    /// <param name="toParentCmd">
    /// Function to convert a <see cref="Msg"/> to its corresponding parent message.
    /// </param>
    /// <param name="loadProjectCmd"/> 
    /// Function to generate a load project command from the given path.
    /// </param>
    /// <param name="moveToNewProjectPageCmd"/>
    /// Function to generate the command to move to the new project page view.
    /// </param>
    /// <param name="loadRecentProjectsCmd">
    /// Function to generate the command to load the recent projects.
    /// </param>
    /// <param name="cmdMsg">
    /// The command message to convert.
    /// </param>
    /// <returns>
    /// A parent message command corresponding with the specified <paramref name="cmdMsg"/>.
    /// </returns>
    let public toCmd (toParentCmd : Msg -> 'ParentMsg )
                     (loadProjectCmd : Common.Path.T -> Cmd<'ParentMsg>) 
                     (moveToNewProjectPageCmd : unit -> Cmd<'ParentMsg>)
                     (loadRecentProjectsCmd : unit -> Cmd<'ParentMsg>)
                     (cmdMsg: CmdMsg) : Cmd<'ParentMsg> =
        match cmdMsg with 
        | OpenProjectFilePicker ->
            openProjectFilePickerCmd () |> Cmd.map toParentCmd
        | LoadProject path ->
            loadProjectCmd path
        | MoveToNewProjectPage ->
            moveToNewProjectPageCmd ()
        | LoadRecentProjects ->
            loadRecentProjectsCmd ()

    /// <summary>
    /// MVU update function to convert a msg and model into the next model and
    /// set of command messages to execute.
    /// </summary>
    /// <param name="msg">The message to act upon.</param>
    /// <param name="model">The current model to transform.</param>
    /// <returns>
    /// The next model and a list of <see cref="CmdMsg"/> to execute.
    /// </returns>
    let public update (msg: Msg) (model: Model) : Model * CmdMsg list =
        match msg with
        | RecentProjectMsg (id, RequestOpenRecentProject) ->
            let recentProject = List.find (fun (e: Domain.RecentProject.T) -> e.Id = id) model.RecentProjects
            model, [ LoadProject recentProject.Data.Path ]
        | RequestMoveToNewProjectPage ->
            model, [ MoveToNewProjectPage ]
        | RequestOpenProjectFilePicker ->
            model, [ OpenProjectFilePicker ]
        | RequestOpenProject path ->
            model, [ LoadProject path ]
        | UpdateRecentProjects recentProjects ->
            { model with RecentProjects = recentProjects }, []
        | NoOp ->
            model, []

    let private selectedToMsg (i: int) (m: Model) =
            RecentProjectMsg ((m.RecentProjects |> List.item i).Id, RequestOpenRecentProject)

    /// <summary>
    /// The bindings of this starting page.
    /// </summary>
    let public bindings () = 
        [ "RecentProjects" |> Binding.subModelSeq(
            (fun (m: Model) -> m.RecentProjects),
            (fun (_, m) -> m), 
            (fun (e: Domain.RecentProject.T) -> e.Id), 
            (fun (id: Domain.RecentProject.Id, msg: RecentProjectMsg) -> RecentProjectMsg (id, msg)),
            fun () -> 
                [ "ProjectName" |> Binding.oneWay (fun m -> m.Data.Path |> Common.Path.name)
                  "ProjectDirectory" |> Binding.oneWay (fun m -> m.Data.Path |> Common.Path.parentDirectory 
                                                                             |> Common.Path.toString)
                  "LastOpened" |> Binding.oneWay (fun m -> $"{m.Data.LastOpened.ToShortDateString()} {m.Data.LastOpened.ToShortTimeString()}")
                ])

          // This is a bit of hack: 
          // we are abusing the SelectedIndex to notify when an element in the RecentProjects
          // is clicked, when this happens we load the correct project. 
          // Upon navigating to this page, nothing should be selected, and when something 
          // is selected we navigate away from the StartingPage, as such we always return -1,
          // i.e. nothing selected.
          "SelectedIndex" |> Binding.twoWay(
            (fun _ -> -1),
            selectedToMsg)

          // Dispatch commands
          "RequestNewProjectPageCommand" |> Binding.cmd RequestMoveToNewProjectPage
          "RequestOpenProjectFilePickerCommand" |> Binding.cmd RequestOpenProjectFilePicker
        ]
